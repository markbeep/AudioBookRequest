"""remove notification services

Revision ID: 63489e50e337
Revises: 304eed96f8ed
Create Date: 2025-07-01 20:26:49.155471

"""

import json
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = "63489e50e337"
down_revision: Union[str, None] = "304eed96f8ed"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("notification", schema=None) as batch_op:
        notification_body_type = sa.Enum(
            "text", "json", name="notificationbodytypeenum"
        )
        notification_body_type.create(op.get_bind(), checkfirst=True)
        batch_op.add_column(
            sa.Column(
                "body_type",
                notification_body_type,
                nullable=False,
                server_default="json",
            )
        )
        batch_op.add_column(
            sa.Column(
                "body",
                sqlmodel.sql.sqltypes.AutoString(),
                nullable=False,
                server_default="{}",
            )
        )

    conn = op.get_bind()
    old_bodies = conn.execute(
        sa.text(
            "SELECT additional_fields, title_template, body_template, service FROM notification"
        )
    )
    for fields, title, body, service in old_bodies:
        new_body = json.loads(fields)
        new_body["title"] = title

        if service == "gotify":
            new_body["message"] = body
        elif service == "apprise":
            new_body["body"] = body

        conn.execute(
            sa.text("UPDATE notification SET body = :fields"),
            {"fields": json.dumps(new_body)},
        )

    with op.batch_alter_table("notification", schema=None) as batch_op:
        batch_op.drop_column("additional_fields")
        batch_op.drop_column("title_template")
        batch_op.drop_column("service")
        batch_op.drop_column("body_template")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("notification", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("body_template", sa.VARCHAR(), nullable=False, server_default="")
        )
        batch_op.add_column(
            sa.Column(
                "service", sa.VARCHAR(length=7), nullable=False, server_default="custom"
            )
        )
        batch_op.add_column(
            sa.Column("title_template", sa.VARCHAR(), nullable=False, server_default="")
        )
        batch_op.add_column(
            sa.Column(
                "additional_fields",
                sqlite.JSON(),
                server_default=sa.text("'{}'"),
                nullable=True,
            )
        )

    conn = op.get_bind()
    old_bodies = conn.execute(sa.text("SELECT body, body_type FROM notification"))
    for body, body_type in old_bodies:
        fields = {}
        if body_type == "json":
            fields = json.loads(body)
        elif body_type == "text":
            fields = {"message": body}

        conn.execute(
            sa.text("UPDATE notification SET additional_fields = :fields"),
            {"fields": json.dumps(fields), "body": fields.get("message", "")},
        )

    with op.batch_alter_table("notification", schema=None) as batch_op:
        batch_op.drop_column("body")
        batch_op.drop_column("body_type")

    if op.get_bind().dialect.name == "postgresql":
        op.execute("DROP TYPE notificationbodytypeenum")

    # ### end Alembic commands ###
